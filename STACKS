

// STACKS
// reverse a string

#include<iostream>
#include<stack>
#include<string>
using namespace std;

int main(){
    string str = "babbar";
    stack<char>s;
    for(int i=0;i<str.length();i++){
        char ch=str[i];
        s.push(ch);
    }
    string ans = "";
    while(!s.empty()){
        char ch=s.top();
        ans.push_back(ch);
        s.pop();
    }
    cout<<ans<<endl;
    return 0;
}


// deleting the middle element

#include<iostream>
#include<stack>
using namespace std;

void solve(stack<int>&inputstack, int count, int size){
    // base case
    if(count == size/2){
        inputstack.pop();
        return;
    }
// for storing the top element
    int num=inputstack.top();
    inputstack.pop();

    // recursive call
    solve(inputstack, count+1, size);
    inputstack.push(num);
}

void deleteMiddleElement(stack<int>&inputStack, int n){
    int count=0;
    solve(inputStack, count, n);
}
int main(){
    
    stack<int>inputstack;
    int n;
    cin>>n;
    
    for(int i=0;i<n;i++){
        int element;
        cin>>element;
        inputstack.push(element);
    }
    
    int size=inputstack.size();
    
    deleteMiddleElement(inputstack, size);
    
    cout<<"Printing the stack: "<<endl;
    while(!inputstack.empty()){
        cout<<inputstack.top()<<" ";
        inputstack.pop();
    }
    // revering the stack
    
    return 0;
}

// Valid parenthesis

#include<iostream>
#include<stack>
#include<string>
using namespace std;

bool isValidParenthesis(string expression){
    stack<char>s;
    for(int i=0;i<expression.length();i++){
        char ch=expression[i];
        if(ch == '(' || ch=='{' || ch=='['){
            s.push(ch);
        }
        else{
            if(!s.empty()){
                char top=s.top();
                if((ch==')' && top=='(' )||
                    (ch=='}' && top=='{')||
                    (ch==']' && top=='[')) {
                        s.pop();
                    }
                else{
                    return false;
                }
            }
            else {
                return false;
            }
        }
    }
    return s.empty();
}
int main(){
    string expression;
    cin>>expression;
    
    if(isValidParenthesis(expression)){
        cout<<"Balanced"<<endl;
        
    }else{
        cout<<"Unbalanced"<<endl;
    }
    return 0;  
}

// Insert element at bottom
#include<iostream>
#include<stack>

using namespace std;

void solve(stack<int>&s, int x){        //how element is inserted at bottom
    if(s.empty()){
        s.push(x);
        return;
    }

    int num= s.top();
    s.pop();

    solve(s, x);

    s.push(num);
}
stack<int>pushAtBottom(stack<int>&myStack, int x){  //to push element at bottom
    solve(myStack, x);
    return myStack;
}
 void printStack(stack<int>myStack){     //printing the stack
     while(!myStack.empty()){
         cout<<myStack.top()<<" ";
         myStack.pop();
         
     }
     cout<<endl;
 }

int main(){
    stack<int>myStack;
    int n,element,x;
    cin>>n;
    
    for(int i=0;i<n;i++){  //taking stack input
        cin>>element;
        myStack.push(element);
        
    }
    cin>>x;

    myStack = pushAtBottom(myStack,x);
    printStack(myStack);
    return 0;
}

// reverse stack using recursion
#include<iostream>
#include<stack>
using namespace std;

void insertAtBottom(stack<int>&s, int x){
    if(s.empty()){
        s.push(x);
        return;
    }

    int num= s.top();
    s.pop();
    
    insertAtBottom(s, x);

    s.push(num);
    }

void reverseStack(stack<int>&s){
    if(s.empty()){
        return;
    }

    int num=s.top();
    s.pop();
    reverseStack(s);
    insertAtBottom(s,num);
}

void printStack(stack<int> s) {
    while (!s.empty()) {
        cout << s.top() << " ";
        s.pop();
    }
    cout << endl;
}
int main(){
    stack<int>s;
    int n, element;
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>element;
        s.push(element);
    }
    
    reverseStack(s);
    printStack(s);
    return 0;
}
